/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package text_editor;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author GOVIND SINGLA
 */
public class main_screen extends javax.swing.JFrame {

    String text1 = "", old_text = "", name = null, s;
    boolean b = false, b2 = false;

    File file = null;

    public void save_file() {
        JFileChooser j = new JFileChooser();
        j.setAcceptAllFileFilterUsed(false);
        j.addChoosableFileFilter(new FileNameExtensionFilter("*.txt", "txt"));

        try {
            if (j.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                String text = jTextArea2.getText();
                file = new File(j.getSelectedFile() + ".txt");
                try (FileOutputStream fos = new FileOutputStream(file)) {
                    setTitle(file.getName());
                    byte[] b = text.getBytes();
                    fos.write(b);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Creates new form main_screen
     */
    public main_screen() {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        New_item = new javax.swing.JMenuItem();
        Open_item = new javax.swing.JMenuItem();
        Save_item = new javax.swing.JMenuItem();
        save_as = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        Font = new javax.swing.JMenuItem();
        color_chooser = new javax.swing.JMenuItem();
        background_color = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Untitled - Notepad");

        jScrollPane1.setHorizontalScrollBarPolicy(jScrollPane1.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(jScrollPane1.VERTICAL_SCROLLBAR_ALWAYS);

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 20));
        jTextArea2.setRows(5);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea2KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea2);

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N

        New_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        New_item.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        New_item.setText("New");
        New_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_itemActionPerformed(evt);
            }
        });
        jMenu1.add(New_item);

        Open_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open_item.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Open_item.setText("Open");
        Open_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Open_itemActionPerformed(evt);
            }
        });
        jMenu1.add(Open_item);

        Save_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save_item.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Save_item.setText("Save");
        Save_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_itemActionPerformed(evt);
            }
        });
        jMenu1.add(Save_item);

        save_as.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        save_as.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        save_as.setText("Save As");
        save_as.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_asActionPerformed(evt);
            }
        });
        jMenu1.add(save_as);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        jMenu2.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        jMenu2.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        jMenu2.add(paste);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Format");
        jMenu3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N

        Font.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Font.setText("Font");
        Font.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontActionPerformed(evt);
            }
        });
        jMenu3.add(Font);

        color_chooser.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        color_chooser.setText("Font Color");
        color_chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color_chooserActionPerformed(evt);
            }
        });
        jMenu3.add(color_chooser);

        background_color.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        background_color.setText("Background Color");
        background_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                background_colorActionPerformed(evt);
            }
        });
        jMenu3.add(background_color);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void New_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_itemActionPerformed
        String title = getTitle();
        if (title.equals("Untitled - Notepad") && !jTextArea2.getText().equals("")) {

            Object[] choices = {"Save", "Don't Save", "Cancel"};
            Object defaultChoice = choices[0];
            int i = JOptionPane.showOptionDialog(this,
                    "Do you want to save the changes to file",
                    "Text Editor",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    choices,
                    defaultChoice);

            if (i == 0) {
                save_file();
                jTextArea2.setText("");
                setTitle("Untitled - Notepad");
            } else if (i == 1) {
                jTextArea2.setText("");
            }
        } else {
            jTextArea2.setText("");
        }
    }//GEN-LAST:event_New_itemActionPerformed

    private void Open_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Open_itemActionPerformed

        JFileChooser j = new JFileChooser();
        j.setAcceptAllFileFilterUsed(false);
        j.addChoosableFileFilter(new FileNameExtensionFilter("*.txt", "txt"));

        try {
            if (j.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                file = j.getSelectedFile();

                jTextArea2.setText("");
                FileInputStream fis = new FileInputStream(file);
                int i;
                String name = file.getName();
                int pos = name.lastIndexOf(".");
                if (pos > 0) {
                    name = name.substring(0, pos);
                }
                setTitle(name + " - Notepad");
                while ((i = fis.read()) != -1) {
                    jTextArea2.append(String.valueOf((char) i));
                }
                old_text = jTextArea2.getText();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_Open_itemActionPerformed

    private void Save_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_itemActionPerformed

        String title = getTitle();
        if (title.equals("Untitled - Notepad")) {
            save_file();
        } else {
            String text = jTextArea2.getText();
            try (FileOutputStream fos = new FileOutputStream(file)) {
                setTitle(file.getName());
                byte[] b = text.getBytes();
                fos.write(b);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_Save_itemActionPerformed

    private void jTextArea2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyTyped
        b2 = true;
    }//GEN-LAST:event_jTextArea2KeyTyped

    private void save_asActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_asActionPerformed

        save_file();
        String name = file.getName();
        int pos = name.lastIndexOf(".");
        if (pos > 0) {
            name = name.substring(0, pos);
        }
        setTitle(name + " - Notepad");

    }//GEN-LAST:event_save_asActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        jTextArea2.paste();
    }//GEN-LAST:event_pasteActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        jTextArea2.cut();
    }//GEN-LAST:event_cutActionPerformed


    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        jTextArea2.copy();
    }//GEN-LAST:event_copyActionPerformed

    private void FontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FontActionPerformed

        String text = jTextArea2.getText();
        font_window fw = new font_window();
        fw.setVisible(true);
        fw.setLocationRelativeTo(jScrollPane1);

    }//GEN-LAST:event_FontActionPerformed

    private void color_chooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color_chooserActionPerformed
        Color c = JColorChooser.showDialog(null, "Choose Font Color", Color.black);
        jTextArea2.setForeground(c);

    }//GEN-LAST:event_color_chooserActionPerformed

    private void background_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_background_colorActionPerformed
        Color c = JColorChooser.showDialog(null, "Choose Font Color", Color.black);
        jTextArea2.setBackground(c);
        jScrollPane1.setBackground(c);
    }//GEN-LAST:event_background_colorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Font;
    private javax.swing.JMenuItem New_item;
    private javax.swing.JMenuItem Open_item;
    private javax.swing.JMenuItem Save_item;
    private javax.swing.JMenuItem background_color;
    private javax.swing.JMenuItem color_chooser;
    private javax.swing.JMenuItem copy;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea2;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem save_as;
    // End of variables declaration//GEN-END:variables
}